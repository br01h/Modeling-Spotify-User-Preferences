# Function to scale and remove non-numeric rows
convenient_scale <- function(df) {
# Save genre classes
genres <- as.factor(df$genres)
# Scale numeric columns
df <- df %>% mutate_if(is.numeric, scale) %>% select_if(is.numeric)
# Readd genre classes
df$genres <- cbind(genres, df)
}
# Scale data
usr1_lib_scaled <- convenient_scale(clean_data[[1]])
usr2_lib_scaled <- convenient_scale(clean_data[[3]])
# PCA
usr1_pca <- PCA(usr1_lib_scaled[,-1], graph = FALSE)
usr2_pca <- PCA(usr2_lib_scaled[,-1], graph = FALSE)
# Skree plot
fviz_eig(usr1_pca, addlabels = TRUE, ylim = c(0, 50))
fviz_eig(usr2_pca, addlabels = TRUE, ylim = c(0, 50))
fviz_pca_ind(usr1_pca, col.ind = "cos2", pointsize = 0.2,
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = FALSE) # Avoid text overlapping (slow if many points)
fviz_pca_ind(usr2_pca, geom.ind = "point", pointsize = 0.2, addEllipses = TRUE,)
# Check if average genre features alone cluster based on audio features
# (summarize average audio features by genre)
gens <- usr1_lib_scaled %>%
group_by(genres) %>%
summarise_all(mean)
# PCA on average genre feature
gens_pca <- PCA(gens[,-1], ncp = 10, graph = FALSE)
fviz_pca_ind(gens_pca, geom.ind = "point", pointsize = 0.2)
usr1_lib_scaled
# PCA
usr1_pca <- PCA(usr1_lib_scaled[,-1], graph = FALSE)
# Skree plot
fviz_eig(usr1_pca, addlabels = TRUE, ylim = c(0, 50))
fviz_pca_ind(usr1_pca, col.ind = "cos2", pointsize = 0.2,
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = FALSE) # Avoid text overlapping (slow if many points)
fviz_pca_ind(usr2_pca, geom.ind = "point", pointsize = 0.2, addEllipses = TRUE,)
fviz_pca_ind(gens_pca, geom.ind = "point", pointsize = 0.2)
# Function to scale and remove non-numeric rows
convenient_scale <- function(df) {
# Save genre classes
genres <- as.factor(df$genres)
# Scale numeric columns
df <- df %>% mutate_if(is.numeric, scale) %>% select_if(is.numeric)
# Readd genre classes
df$genres <- cbind(genres, df)
}
# Scale data
usr1_lib_scaled <- convenient_scale(clean_data[[1]])
usr2_lib_scaled <- convenient_scale(clean_data[[3]])
usr1_streams_scaled <- convenient_scale(clean_data[[2]])
usr2_streams_scaled <- convenient_scale(clean_data[[4]])
# PCA
usr1_libpca <- PCA(usr1_lib_scaled[,-1], graph = FALSE)
usr2_libpca <- PCA(usr2_lib_scaled[,-1], graph = FALSE)
usr1_strmpca <- PCA(usr1_lib_scaled[,-1], graph = FALSE)
usr2_strmpca <- PCA(usr2_lib_scaled[,-1], graph = FALSE)
# Skree plot
fviz_eig(usr1_libpca, addlabels = TRUE, ylim = c(0, 50))
fviz_eig(usr2_libpca, addlabels = TRUE, ylim = c(0, 50))
fviz_eig(usr1_strmpca, addlabels = TRUE, ylim = c(0, 50))
fviz_eig(usr2_strmpca, addlabels = TRUE, ylim = c(0, 50))
# PC1/PC2 Plot
fviz_pca_ind(usr1_libpca, geom.ind = "point", pointsize = 0.2, addEllipses = TRUE,)
fviz_pca_ind(usr2_libpca, geom.ind = "point", pointsize = 0.2, addEllipses = TRUE,)
fviz_pca_ind(usr1_strmpca, geom.ind = "point", pointsize = 0.2, addEllipses = TRUE,)
fviz_pca_ind(usr2_strmpca, geom.ind = "point", pointsize = 0.2, addEllipses = TRUE,)
# Function to scale and remove non-numeric rows
convenient_scale <- function(df) {
# Save genre classes
genres <- as.factor(df$genres)
# Scale numeric columns
df <- df %>% mutate_if(is.numeric, scale) %>% select_if(is.numeric)
# Readd genre classes
df$genres <- cbind(genres, df)
}
par(mfrow = c(2,2))
# Scale data
usr1_lib_scaled <- convenient_scale(clean_data[[1]])
usr2_lib_scaled <- convenient_scale(clean_data[[3]])
usr1_streams_scaled <- convenient_scale(clean_data[[2]])
usr2_streams_scaled <- convenient_scale(clean_data[[4]])
# PCA
usr1_libpca <- PCA(usr1_lib_scaled[,-1], graph = FALSE)
usr2_libpca <- PCA(usr2_lib_scaled[,-1], graph = FALSE)
usr1_strmpca <- PCA(usr1_lib_scaled[,-1], graph = FALSE)
usr2_strmpca <- PCA(usr2_lib_scaled[,-1], graph = FALSE)
# Skree plot
fviz_eig(usr1_libpca, addlabels = TRUE, ylim = c(0, 50))
fviz_eig(usr2_libpca, addlabels = TRUE, ylim = c(0, 50))
fviz_eig(usr1_strmpca, addlabels = TRUE, ylim = c(0, 50))
fviz_eig(usr2_strmpca, addlabels = TRUE, ylim = c(0, 50))
# PC1/PC2 Plot
fviz_pca_ind(usr1_libpca, geom.ind = "point", pointsize = 0.2, addEllipses = TRUE,)
fviz_pca_ind(usr2_libpca, geom.ind = "point", pointsize = 0.2, addEllipses = TRUE,)
fviz_pca_ind(usr1_strmpca, geom.ind = "point", pointsize = 0.2, addEllipses = TRUE,)
fviz_pca_ind(usr2_strmpca, geom.ind = "point", pointsize = 0.2, addEllipses = TRUE,)
# Check if average genre features alone cluster based on audio features
# (summarize average audio features by genre)
gens1 <- usr1_streams_scaled %>%
group_by(genres) %>%
summarise_all(mean)
gens2 <- usr2_streams_scaled %>%
group_by(genres) %>%
summarise_all(mean)
combined_streams <- rbind(usr1_streams_scaled, usr2_streams_scaled)
gens3 <- combined_streams %>%
group_by(genres) %>%
summarise_all(mean)
# PCA on average genre features
gens1_pca <- PCA(gens1[,-1], ncp = 10, graph = FALSE)
gens2_pca <- PCA(gens2[,-1], ncp = 10, graph = FALSE)
gens3_pca <- PCA(gens3[,-1], ncp = 10, graph = FALSE)
# PC1/PC2 Plots
fviz_pca_ind(gens1_pca, geom.ind = "point", pointsize = 0.2)
fviz_pca_ind(gens2_pca, geom.ind = "point", pointsize = 0.2)
fviz_pca_ind(gens3_pca, geom.ind = "point", pointsize = 0.2)
fviz_eig(gens2_pca, addlabels = TRUE, ylim = c(0, 50))
fviz_eig(gens1_pca, addlabels = TRUE, ylim = c(0, 50))
fviz_eig(gens3_pca, addlabels = TRUE, ylim = c(0, 50))
# Check if average genre features alone cluster based on audio features
# (summarize average audio features by genre)
gens1 <- usr1_streams_scaled %>%
group_by(genres) %>%
summarise_all(mean)
gens2 <- usr2_streams_scaled %>%
group_by(genres) %>%
summarise_all(mean)
combined_streams <- rbind(usr1_streams_scaled, usr2_streams_scaled)
gens3 <- combined_streams %>%
group_by(genres) %>%
summarise_all(mean)
# PCA on average genre features
gens1_pca <- PCA(gens1[,-1], ncp = 10, graph = FALSE)
gens2_pca <- PCA(gens2[,-1], ncp = 10, graph = FALSE)
gens3_pca <- PCA(gens3[,-1], ncp = 10, graph = FALSE)
# PC1/PC2 Plots
fviz_pca_ind(gens1_pca, geom.ind = "point", pointsize = 0.2)
fviz_pca_ind(gens2_pca, geom.ind = "point", pointsize = 0.2)
fviz_pca_ind(gens3_pca, geom.ind = "point", pointsize = 0.2)
gens3_pca
gens3
usr1_lib_scaled
usr1_streams_scaled
usr1_streams_scaled <- convenient_scale(clean_data[[2]])[, -2]
usr1_streams_scaled
# Function to scale and remove non-numeric rows
convenient_scale <- function(df) {
# Save genre classes
genres <- as.factor(df$genres)
# Scale numeric columns
df <- df %>% mutate_if(is.numeric, scale) %>% select_if(is.numeric)
# Readd genre classes
df$genres <- cbind(genres, df)
}
par(mfrow = c(2,2))
# Scale data
usr1_lib_scaled <- convenient_scale(clean_data[[1]])
usr2_lib_scaled <- convenient_scale(clean_data[[3]])
usr1_streams_scaled <- convenient_scale(clean_data[[2]])[, -2]
usr2_streams_scaled <- convenient_scale(clean_data[[4]])[, -2]
# PCA
usr1_libpca <- PCA(usr1_lib_scaled[,-1], graph = FALSE)
usr2_libpca <- PCA(usr2_lib_scaled[,-1], graph = FALSE)
usr1_strmpca <- PCA(usr1_lib_scaled[,-1], graph = FALSE)
usr2_strmpca <- PCA(usr2_lib_scaled[,-1], graph = FALSE)
# Skree plot
fviz_eig(usr1_libpca, addlabels = TRUE, ylim = c(0, 50))
fviz_eig(usr2_libpca, addlabels = TRUE, ylim = c(0, 50))
fviz_eig(usr1_strmpca, addlabels = TRUE, ylim = c(0, 50))
fviz_eig(usr2_strmpca, addlabels = TRUE, ylim = c(0, 50))
# PC1/PC2 Plot
fviz_pca_ind(usr1_libpca, geom.ind = "point", pointsize = 0.2, addEllipses = TRUE,)
fviz_pca_ind(usr2_libpca, geom.ind = "point", pointsize = 0.2, addEllipses = TRUE,)
fviz_pca_ind(usr1_strmpca, geom.ind = "point", pointsize = 0.2, addEllipses = TRUE,)
fviz_pca_ind(usr2_strmpca, geom.ind = "point", pointsize = 0.2, addEllipses = TRUE,)
# Check if average genre features alone cluster based on audio features
# (summarize average audio features by genre)
gens1 <- usr1_streams_scaled %>%
group_by(genres) %>%
summarise_all(mean)
gens2 <- usr2_streams_scaled %>%
group_by(genres) %>%
summarise_all(mean)
combined_streams <- rbind(usr1_streams_scaled, usr2_streams_scaled)
gens3 <- combined_streams %>%
group_by(genres) %>%
summarise_all(mean)
# Check if average genre features alone cluster based on audio features
# (summarize average audio features by genre)
gens1 <- usr1_streams_scaled %>%
group_by(genres) %>%
summarise_all(mean)
gens2 <- usr2_streams_scaled %>%
group_by(genres) %>%
summarise_all(mean)
combined_streams <- rbind(usr1_streams_scaled, usr2_streams_scaled)
gens3 <- combined_streams %>%
group_by(genres) %>%
summarise_all(mean)
# PCA on average genre features
gens1_pca <- PCA(gens1[,-1], ncp = 10, graph = FALSE)
gens2_pca <- PCA(gens2[,-1], ncp = 10, graph = FALSE)
gens3_pca <- PCA(gens3[,-1], ncp = 10, graph = FALSE)
# PC1/PC2 Plots
fviz_pca_ind(gens1_pca, geom.ind = "point", pointsize = 0.2)
fviz_pca_ind(gens2_pca, geom.ind = "point", pointsize = 0.2)
fviz_pca_ind(gens3_pca, geom.ind = "point", pointsize = 0.2)
gens3
library(randomForest)
# we'll use the streaming data since it has more data points than library data
# we'll also use the combined streaming data since it further adds diversity in training
# 13 audio features = 13 predictors
genre_rf <- randomForest(genres~., data = gens3, ntree = 500, importance = TRUE)
genre_rf
varImpPlot(genre_rf)
# misclassifications
min(genre_rf$dev)
# misclassifications
(genre_rf$dev)
# misclassifications
summary(genre_rf)
# misclassifications
summary(genre_rf$confusion)
# misclassifications
summary(genre_rf)
# misclassifications
summary(genre_rf$votes)
# misclassifications
summary(genre_rf)
# misclassifications
plot(genre_rf$err.rate)
# misclassifications
plot(genre_rf$predicted)
# misclassification / error rate
genre_rf$err.rate
# misclassification / error rate
summary(genre_rf$err.rate)
# misclassification / error rate
plot(genre_rf$err.rate)
# misclassification / error rate
summary(genre_rf)
# misclassification / error rate
genre_rf
# misclassification / error rate = 100%
genre_rf[1:5]
# misclassification / error rate = 100%
genre_rf[c(1,2, 6:10)]
# misclassification / error rate = 100%
genre_rf[c(1,2, 7:10)]
# misclassification / error rate = 100%
genre_rf[c(1,2, 8:10)]
# misclassification / error rate = 100%
genre_rf[c(1,2, 11)]
# misclassification / error rate = 100%
genre_rf[c(1,2, 12)]
# misclassification / error rate = 100%
genre_rf[c(1,2, 13)]
# misclassification / error rate = 100%
genre_rf[c(1,2, 14)]
# misclassification / error rate = 100%
genre_rf[c(1,2, 15)]
# misclassification / error rate = 100%
genre_rf[c(1,2, 16)]
# misclassification / error rate = 100%
genre_rf[c(1,2, 17)]
# misclassification / error rate = 100%
genre_rf[c(1,2, 19)]
# misclassification / error rate = 100%
genre_rf
library(randomForest)
# we'll use the streaming data since it has more data points than library data
# we'll also use the combined streaming data since it further adds diversity in training
# 13 audio features = 13 predictors
genre_rf <- randomForest(genres~., data = gens3, ntree = 500, mtry = 5, importance = TRUE)
# misclassification / error rate = 100%
genre_rf
#varImpPlot(genre_rf)
genre_rf$classes
length(genre_rf$classes)
# misclassification / error rate = 100%
#genre_rf
length(genre_rf$classes)
library(xgboost)
install.packages("xgboost")
library(xgboost)
gens3[gens3$genres %in% new_classes, ]
# lets use 12
new_classes <- c('hip hop', 'jazz', 'edm', 'rock', 'punk', 'r&b', 'pop', 'rap', 'country', 'metal', 'latin', 'classical'
gens3[gens3$genres %in% new_classes, ]
library(tidyverse)
gens3[gens3$genres %in% new_classes, ]
# lets use 12
new_classes <- c('hip hop', 'jazz', 'edm', 'rock', 'punk', 'r&b', 'pop', 'rap', 'country', 'metal', 'latin', 'classical'
gens3[gens3$genres %in% new_classes, ]
gens3$genres
gens3[gens3$genres %in% new_classes]
# lets use 12
new_classes <- c('hip hop', 'jazz', 'edm', 'rock', 'punk', 'r&b', 'pop', 'rap', 'country', 'metal', 'latin', 'classical')
gens3[gens3$genres %in% new_classes, ]
usr1_streams_scaled
all_streams
usr_streams <- rbind(usr1_streams_scaled, usr2_streams_scaled)
usr_streams
genre_rf <- randomForest(genres~., data = usr_streams, ntree = 500, mtry = 5, importance = TRUE)
library(randomForest)
# we'll use the streaming data since it has more data points than library data
# we'll also use the combined streaming data since it further adds diversity in training
# 13 audio features = 13 predictors
usr_streams <- rbind(usr1_streams_scaled, usr2_streams_scaled)
genre_rf <- randomForest(genres~., data = usr_streams, ntree = 10, mtry = 13, importance = TRUE)
# lets use 12
new_classes <- c('hip hop', 'jazz', 'edm', 'rock', 'punk', 'r&b', 'pop', 'rap', 'country', 'metal', 'latin', 'classical')
usr_streams[usr_streams$genres %in% new_classes, ]
usr_streams
usr_streams[usr_streams$genres %in% new_classes, ]
test <- c('r&b', 'pop', 'rap', 'latin')
usr_streams[usr_streams$genres %in% test, ]
test <- c('r&b', 'rap', 'latin')
usr_streams[usr_streams$genres %in% test, ]
usr_streams[usr_streams$genres %in% new_classes, ]
shortened_usr_streams <- usr_streams[usr_streams$genres %in% new_classes, ]
# lets use general 12 classes
new_classes <- c('hip hop', 'jazz', 'edm', 'rock', 'punk', 'r&b', 'pop', 'rap', 'country', 'metal', 'latin', 'classical')
shortened_usr_streams <- usr_streams[usr_streams$genres %in% new_classes, ]
genre_rf <- randomForest(genres~., data = usr_streams, ntree = 500, importance = TRUE)
# lets use general 12 classes
new_classes <- c('hip hop', 'jazz', 'edm', 'rock', 'punk', 'r&b', 'pop', 'rap', 'country', 'metal', 'latin', 'classical')
shortened_usr_streams <- usr_streams[usr_streams$genres %in% new_classes, ]
genre_rf2 <- randomForest(genres~., data = shortened_usr_streams, ntree = 500, importance = TRUE)
shortened_usr_streams
genre_rf2 <- randomForest(genres~., data = shortened_usr_streams, ntree = 500, importance = TRUE)
usr_streams
shortened_usr_streams
genre_rf2 <- randomForest(genres~., data = shortened_usr_streams, ntree = 500, importance = TRUE)
shortened_usr_streams <- droplevels(usr_streams[usr_streams$genres %in% new_classes, ])
genre_rf2 <- randomForest(genres~., data = shortened_usr_streams, ntree = 500, importance = TRUE)
genre_rf2 <- randomForest(genres~., data = shortened_usr_streams, ntree = 500, importance = TRUE)
# misclassification / error rate = 100%
genre_rf2
shortened_usr_streams$genres[shortened_usr_streams$genres == 'hip hop']
shortened_usr_streams$genres[shortened_usr_streams$genres == 'hip hop'] <- 'rap'
genre_rf2 <- randomForest(genres~., data = shortened_usr_streams, ntree = 500, importance = TRUE)
shortened_usr_streams <- droplevels(shortened_usr_streams)
# lets use general 12 classes
new_classes <- c('hip hop', 'jazz', 'edm', 'rock', 'punk', 'r&b', 'pop', 'rap', 'country', 'metal', 'latin', 'classical')
# drop levels that aren't being used anymore
shortened_usr_streams <- usr_streams[usr_streams$genres %in% new_classes, ]
shortened_usr_streams$genres[shortened_usr_streams$genres == 'hip hop'] <- 'rap'
shortened_usr_streams <- droplevels(shortened_usr_streams)
genre_rf2 <- randomForest(genres~., data = shortened_usr_streams, ntree = 500, importance = TRUE)
# misclassification / error rate = 100%
genre_rf2
mtry <- tuneRF(shortened_usr_streams[-1], shortened_usr_streams$genres, ntreeTry = 500,
stepFactor = 1, improve = 0.01, trace = TRUE, plot = TRUE)
mtry <- tuneRF(shortened_usr_streams[-1], shortened_usr_streams$genres, ntreeTry = 500,
stepFactor = 1, improve = 0.01, trace = TRUE, plot = TRUE)
print(mtry)
mtry
tuneRF(shortened_usr_streams[-1], shortened_usr_streams$genres, ntreeTry = 100,
stepFactor = 1.5, improve = 0.01, trace = TRUE, plot = TRUE)
tuneRF(shortened_usr_streams[-1], shortened_usr_streams$genres, ntreeTry = 100,
stepFactor = 2, improve = 0.01, trace = TRUE, plot = TRUE)
tuneRF(shortened_usr_streams[-1], shortened_usr_streams$genres, ntreeTry = 100,
stepFactor = 1.5, improve = 0.01, trace = TRUE, plot = TRUE)
tuneRF(shortened_usr_streams[-1], shortened_usr_streams$genres, ntreeTry = 500,
stepFactor = 1.5, improve = 0.01, trace = TRUE, plot = TRUE)
library(tidyverse)
library(data.table)
library(glue)
library(lubridate)
# PCA
library("FactoMineR")
library("factoextra")
#library(psych)
# ML
library(randomForest)
# For visualization
library(cowplot)
library(ggplot2)
library(quantreg)
library(tidyquant) ## rolling average for geom_smooth
library(grid)
# Themes
library(ggthemes)
library(egg)
library(RColorBrewer)
# number of classes
length(unique(usr_streams$genres))
# Plot weekly average play time
all_streams %>%
group_by(week_of_year, endDate, user) %>%
summarise(dailyPlayTime = sum(minPlayed)/60,
dailyPlays = n()) %>%
group_by(week_of_year, user) %>%
summarise(avg_weeklyPlayTime = mean(dailyPlayTime),
avg_weeklyPlays = mean(dailyPlays)) %>%
ggplot(aes(x = week_of_year, color = user)) +
geom_ma(aes(y=avg_weeklyPlayTime), n = 1, linetype = 1, size = 1, alpha = 1.0) +
geom_ma(aes(y=avg_weeklyPlays/20), n = 1, linetype = 3, size = 0.8, alpha = 0.8) +
scale_x_continuous(name = element_blank(), labels = months, breaks = seq(0, 57, 4.4167)) +
scale_y_continuous(name = 'Hours Played (solid)', limits = c(0,7), breaks = seq(0,7,1),
sec.axis = sec_axis(name = 'Songs Played (dotted)', ~.*20, breaks = seq(0,140,20), )) +
ggtitle('Weekly Average Play Time and Play Counts',
subtitle = 'Jan 20, 2020 - Jan 22, 2021') +
scale_color_brewer(palette = 'Dark2') +
theme_article() +
theme(legend.title = element_blank(),
legend.position = c(0.93,0.93),
axis.title.y.left = element_text(vjust = 3),
axis.title.y.right = element_text(vjust = 3, angle = -90),
panel.grid.major = element_line(color = '#ededed'))
# Plot 3 week average play time
all_streams %>%
group_by(week_of_year, endDate, user) %>%
summarise(dailyPlayTime = sum(minPlayed)/60,
dailyPlays = n()) %>%
group_by(week_of_year, user) %>%
summarise(avg_weeklyPlayTime = mean(dailyPlayTime),
avg_weeklyPlays = mean(dailyPlays)) %>%
ggplot(aes(x = week_of_year, color = user)) +
#geom_ma(es(y=avg_weeklyPlayTime), n = 1, linetype = 1, size = 1, alpha = 1.0) +
#geom_ma(aes(y=avg_weeklyPlayTime), n = 2, linetype = 1, size = 1, alpha = 1.0) +
geom_ma(aes(y=avg_weeklyPlayTime), n = 3, linetype = 1, size = 1, alpha = 1.0) +
geom_ma(aes(y=avg_weeklyPlays/22), n = 3, linetype = 3, size = 0.8, alpha = 0.8) +
scale_x_continuous(name = element_blank(), labels = months, breaks = seq(0, 57, 4.4167)) +
scale_y_continuous(name = 'Hours Played (solid)', limits = c(0,7), breaks = seq(0,7,1),
sec.axis = sec_axis(name = 'Songs Played (dotted)', ~.*22, breaks = seq(0,60,40), )) +
ggtitle('3-Week Average Play Time and Play Counts',
subtitle = 'Jan 20, 2020 - Jan 22, 2021') +
scale_color_brewer(palette = 'Dark2') +
theme_article() +
theme(legend.title = element_blank(),
legend.position = c(0.93,0.93),
axis.title.y.left = element_text(vjust = 3),
axis.title.y.right = element_text(vjust = 3, angle = -90),
panel.grid.major = element_line(color = '#ededed'))
# Plot 3 week average play time
all_streams %>%
group_by(week_of_year, endDate, user) %>%
summarise(dailyPlayTime = sum(minPlayed)/60,
dailyPlays = n()) %>%
group_by(week_of_year, user) %>%
summarise(avg_weeklyPlayTime = mean(dailyPlayTime),
avg_weeklyPlays = mean(dailyPlays)) %>%
ggplot(aes(x = week_of_year, color = user)) +
#geom_ma(es(y=avg_weeklyPlayTime), n = 1, linetype = 1, size = 1, alpha = 1.0) +
#geom_ma(aes(y=avg_weeklyPlayTime), n = 2, linetype = 1, size = 1, alpha = 1.0) +
geom_ma(aes(y=avg_weeklyPlayTime), n = 3, linetype = 1, size = 1, alpha = 1.0) +
geom_ma(aes(y=avg_weeklyPlays/22), n = 3, linetype = 3, size = 0.8, alpha = 0.8) +
scale_x_continuous(name = element_blank(), labels = months, breaks = seq(0, 57, 4.4167)) +
scale_y_continuous(name = 'Hours Played (solid)', limits = c(0,7), breaks = seq(0,7,1),
sec.axis = sec_axis(name = 'Songs Played (dotted)', ~.*22, breaks = seq(0,140,20), )) +
ggtitle('3-Week Average Play Time and Play Counts',
subtitle = 'Jan 20, 2020 - Jan 22, 2021') +
scale_color_brewer(palette = 'Dark2') +
theme_article() +
theme(legend.title = element_blank(),
legend.position = c(0.93,0.93),
axis.title.y.left = element_text(vjust = 3),
axis.title.y.right = element_text(vjust = 3, angle = -90),
panel.grid.major = element_line(color = '#ededed'))
# Plot 3 week average play time
all_streams %>%
group_by(week_of_year, endDate, user) %>%
summarise(dailyPlayTime = sum(minPlayed)/60,
dailyPlays = n()) %>%
group_by(week_of_year, user) %>%
summarise(avg_weeklyPlayTime = mean(dailyPlayTime),
avg_weeklyPlays = mean(dailyPlays)) %>%
ggplot(aes(x = week_of_year, color = user)) +
#geom_ma(es(y=avg_weeklyPlayTime), n = 1, linetype = 1, size = 1, alpha = 1.0) +
#geom_ma(aes(y=avg_weeklyPlayTime), n = 2, linetype = 1, size = 1, alpha = 1.0) +
geom_ma(aes(y=avg_weeklyPlayTime), n = 3, linetype = 1, size = 1, alpha = 1.0) +
geom_ma(aes(y=avg_weeklyPlays/20), n = 3, linetype = 3, size = 0.8, alpha = 0.8) +
scale_x_continuous(name = element_blank(), labels = months, breaks = seq(0, 57, 4.4167)) +
scale_y_continuous(name = 'Hours Played (solid)', limits = c(0,7), breaks = seq(0,7,1),
sec.axis = sec_axis(name = 'Songs Played (dotted)', ~.*20, breaks = seq(0,140,20), )) +
ggtitle('3-Week Average Play Time and Play Counts',
subtitle = 'Jan 20, 2020 - Jan 22, 2021') +
scale_color_brewer(palette = 'Dark2') +
theme_article() +
theme(legend.title = element_blank(),
legend.position = c(0.93,0.93),
axis.title.y.left = element_text(vjust = 3),
axis.title.y.right = element_text(vjust = 3, angle = -90),
panel.grid.major = element_line(color = '#ededed'))
# Plot weekly average play time
all_streams %>%
group_by(week_of_year, endDate, user) %>%
summarise(dailyPlayTime = sum(minPlayed)/60,
dailyPlays = n()) %>%
group_by(week_of_year, user) %>%
summarise(avg_weeklyPlayTime = mean(dailyPlayTime),
avg_weeklyPlays = mean(dailyPlays)) %>%
ggplot(aes(x = week_of_year, color = user)) +
geom_ma(aes(y=avg_weeklyPlayTime), n = 1, linetype = 1, size = 1, alpha = 1.0) +
geom_ma(aes(y=avg_weeklyPlays/20), n = 1, linetype = 3, size = 0.8, alpha = 0.8) +
scale_x_continuous(name = element_blank(), labels = months, breaks = seq(0, 57, 4.4167)) +
scale_y_continuous(name = 'Hours Played (solid)', limits = c(0,7), breaks = seq(0,7,1),
sec.axis = sec_axis(name = 'Songs Played (dotted)', ~.*20, breaks = seq(0,140,20), )) +
ggtitle('Weekly Average Play Time and Play Counts',
subtitle = 'Jan 20, 2020 - Jan 22, 2021') +
scale_color_brewer(palette = 'Dark2') +
theme_article() +
theme(legend.title = element_blank(),
legend.position = c(0.93,0.93),
axis.title.y.left = element_text(vjust = 3),
axis.title.y.right = element_text(vjust = 3, angle = -90),
panel.grid.major = element_line(color = '#ededed'))
