response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
# format data and append
content <- try(content(response)$tracks$items[[1]])
return(content)
tmp <- data.frame(trackName = content[[10]], id = content[[12]])# 10 & 12 are name and id
track_ids <- rbind(track_ids, tmp)
Sys.sleep(0.1)
}
track_ids
}
set.seed(1)
t <- sample_n(usr1_lib,5)
r <- get_track_ids(t$trackName)
r[[10]]
#get_track_metadata(sample_n(usr1_lib,10)$trackName)
r#$tracks$items[[1]]$id
get_track_ids <- function(track_vector) {
tracks <- str_replace_all(track_vector, pattern=' ', replacement='')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
# format data and append
content <- try(unlist(content(response)$tracks$items[[1]]))
#return(content)
tmp <- data.frame(trackName = content[10], id = content[12])# 10 & 12 are name and id
track_ids <- rbind(track_ids, tmp)
Sys.sleep(0.1)
}
track_ids
}
set.seed(1)
t <- sample_n(usr1_lib,5)
r <- get_track_ids(t$trackName)
r[[10]]
r
get_track_ids <- function(track_vector) {
tracks <- str_replace_all(track_vector, pattern=' ', replacement='')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
# format data and append
content <- try(unlist(content(response)$tracks$items[[1]]))
return(content)
tmp <- data.frame(trackName = content[10], id = content[12])# 10 & 12 are name and id
track_ids <- rbind(track_ids, tmp)
Sys.sleep(0.1)
}
track_ids
}
set.seed(1)
t <- sample_n(usr1_lib,5)
r <- get_track_ids(t$trackName)
r
#get_track_metadata(sample_n(usr1_lib,10)$trackName)
r#$tracks$items[[1]]$id
r[[10]]
get_track_ids <- function(track_vector) {
tracks <- str_replace_all(track_vector, pattern=' ', replacement='')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
# format data and append
content <- try(unlist(content(response)$tracks$items[[1]]))
return(content[[10]])
tmp <- data.frame(trackName = content[10], id = content[12])# 10 & 12 are name and id
track_ids <- rbind(track_ids, tmp)
Sys.sleep(0.1)
}
track_ids
}
get_track_ids(t$trackName)
get_track_ids <- function(track_vector) {
tracks <- str_replace_all(track_vector, pattern=' ', replacement='')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
# format data and append
content <- try(unlist(content(response)$tracks$items[[1]]))
name <- content[[10]]; id <-  content[[12]]
tmp <- data.frame(trackName = name, id = id)# 10 & 12 are name and id
track_ids <- rbind(track_ids, tmp)
Sys.sleep(0.1)
}
track_ids
}
r <- get_track_ids(t$trackName)
r <- get_track_ids(t$trackName)
get_track_ids <- function(track_vector) {
tracks <- str_replace_all(track_vector, pattern=' ', replacement='')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
# format data and append
content <- try(unlist(content(response)$tracks$items[[1]]))
name <- try(content[[10]]); id <- try(content[[12]])
tmp <- data.frame(trackName = name, id = id)# 10 & 12 are name and id
track_ids <- rbind(track_ids, tmp)
Sys.sleep(0.1)
}
track_ids
}
r <- get_track_ids(t$trackName)
get_track_ids <- function(track_vector) {
tracks <- str_replace_all(track_vector, pattern=' ', replacement='')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
# format data and append
content <- try(unlist(content(response)$tracks$items[[1]]))
name <- try(content[[10]]); id <- try(content[[12]])
paste(name, id)
tmp <- data.frame(trackName = name, id = id)# 10 & 12 are name and id
track_ids <- rbind(track_ids, tmp)
Sys.sleep(0.1)
}
track_ids
}
r <- get_track_ids(t$trackName)
get_track_ids <- function(track_vector) {
tracks <- str_replace_all(track_vector, pattern=' ', replacement='')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
# format data and append
content <- try(unlist(content(response)$tracks$items[[1]]))
name <- try(content[[10]]); id <- try(content[[12]])
print(paste(name, id))
tmp <- data.frame(trackName = name, id = id)# 10 & 12 are name and id
track_ids <- rbind(track_ids, tmp)
Sys.sleep(0.1)
}
track_ids
}
r <- get_track_ids(t$trackName)
get_track_ids <- function(track_vector) {
tracks <- str_replace_all(track_vector, pattern=' ', replacement='')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
# format data and append
return(response)
content <- try(unlist(content(response)$tracks$items[[1]]))
name <- content[[10]]); id <- try(content[[12]])
get_track_ids <- function(track_vector) {
tracks <- str_replace_all(track_vector, pattern=' ', replacement='')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
# format data and append
return(response)
content <- try(unlist(content(response)$tracks$items[[1]]))
name <- content[[10]]); id <- try(content[[12]])
get_track_ids <- function(track_vector) {
tracks <- str_replace_all(track_vector, pattern=' ', replacement='')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
# format data and append
return(response)
content <- try(unlist(content(response)$tracks$items[[1]]))
name <- content[[10]]; id <- try(content[[12]])
print(paste(name, id))
tmp <- data.frame(trackName = name, id = id)# 10 & 12 are name and id
track_ids <- rbind(track_ids, tmp)
Sys.sleep(0.1)
}
track_ids
}
r <- get_track_ids(t$trackName)
r
unlist(content(r)$tracks$items[[1]]
unlist(content(r)$tracks$items[[1]])
unlist(content(r)$tracks$items[[1]])
content(r)$tracks$items[[1]]$name
get_track_ids <- function(track_vector) {
tracks <- str_replace_all(track_vector, pattern=' ', replacement='')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
# format data and append
name <- try(content(response)$tracks$items[[1]]$name)
id <- try(content(response)$tracks$items[[1]]$id)
print(paste(name, id))
tmp <- data.frame(trackName = name, id = id)# 10 & 12 are name and id
track_ids <- rbind(track_ids, tmp)
Sys.sleep(0.1)
}
track_ids
}
r <- get_track_ids(t$trackName)
t
t$trackName
get_track_ids <- function(track_vector) {
tracks <- str_replace_all(track_vector, pattern=' ', replacement='')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
content <- content(response)$tracks$items
name <- content[[1]]$name
id <- content[[1]]$id
if (is.null(id) | class(id)=='try-error') {
id <- 'Unknown'
}
print(paste(name, id))
tmp <- data.frame(trackName = name, id = id)# 10 & 12 are name and id
track_ids <- rbind(track_ids, tmp)
Sys.sleep(0.1)
}
track_ids
}
r <- get_track_ids(t$trackName)
get_track_ids <- function(track_vector) {
tracks <- str_replace_all(track_vector, pattern=' ', replacement='')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
id <- try(content(response)$tracks$items[[1]]$id)
if (is.null(id) | class(id)=='try-error') { id <- 'Unknown' }
tmp <- data.frame(trackName = tracks[i], id = id) # 10 & 12 are name and id
track_ids <- rbind(track_ids, tmp)
Sys.sleep(0.1)
}
track_ids
}
r <- get_track_ids(t$trackName)
content(r)$tracks$items[[1]]$name
r
get_track_ids <- function(track_vector) {
tracks <- track_vector#str_replace_all(track_vector, pattern=' ', replacement='')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
id <- try(content(response)$tracks$items[[1]]$id)
if (is.null(id) | class(id)=='try-error') { id <- 'Unknown' }
tmp <- data.frame(trackName = tracks[i], id = id) # 10 & 12 are name and id
track_ids <- rbind(track_ids, tmp)
Sys.sleep(0.1)
}
track_ids
}
r <- get_track_ids(t$trackName)
r
get_track_ids <- function(track_vector) {
tracks <- str_replace_all(track_vector, pattern=' ', replacement='%20')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
id <- try(content(response)$tracks$items[[1]]$id)
if (is.null(id) | class(id)=='try-error') { id <- 'Unknown' }
tmp <- data.frame(trackName = tracks[i], id = id) # 10 & 12 are name and id
track_ids <- rbind(track_ids, tmp)
Sys.sleep(0.1)
}
track_ids
}
r <- get_track_ids(t$trackName)
r
get_track_ids <- function(track_vector) {
tracks <- str_replace_all(track_vector, pattern=' ', replacement='%20')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
id <- try(content(response)$tracks$items[[1]]$id)
if (is.null(id) | class(id)=='try-error') { id <- NA }
tmp <- data.frame(trackName = track_vector[i], id = id) # 10 & 12 are name and id
track_ids <- rbind(track_ids, tmp)
Sys.sleep(0.1)
}
track_ids
}
r <- get_track_ids(t$trackName)
r
get_track_metadata(sample_n(usr1_lib,10)$trackName)
get_track_metadata <- function(track_vector, track_ids = NULL) {
tracks <- track_vector
n_tracks <- length(tracks)
# batch since Spotify can only do 50 IDs at a time
batches <- ceiling(n_tracks/50)
last_batch_length <- n_tracks%%50
if (is.null(track_ids)) {
track_ids <- get_track_ids(tracks) # this is a choke point for speed
} else { } # do nothing
# API token via wrappify
auth_token = getAuthenticationToken()
# collection
track_features <- NULL
for (batch in 1:batches) {
start_idx <- 50*(batch-1)+1
if (batch < batches) {
end_idx <- start_idx + 50
} else {
end_idx <- start_idx + last_batch_length
}
# query
ids <- paste(track_ids$id[start_idx:end_idx], collapse = ',')
url <- glue('https://api.spotify.com/v1/audio-features?ids={ids}')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
# format data and append
batch_features <- rbindlist(lapply(content(response)$audio_features, data.frame))
track_features <- rbind(track_features, batch_features)
Sys.sleep(0.1)
}
track_features <- track_features[, ] # index allc(1:11, 13, 17, 18)
list('features' = track_features, 'track_ids' = track_ids)
}
get_track_ids <- function(track_vector) {
tracks <- str_replace_all(track_vector, pattern=' ', replacement='%20')
# API token via wrappify
auth_token = getAuthenticationToken()
track_ids <- data.frame(trackName = NULL, id = NULL)
for (i in 1:length(tracks)) {
# query
url <- glue('https://api.spotify.com/v1/search?q={tracks[i]}&type=track&limit=1')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
id <- try(content(response)$tracks$items[[1]]$id)
if (is.null(id) | class(id)=='try-error') { id <- NA }
tmp <- data.frame(trackName = track_vector[i], id = id) # 10 & 12 are name and id
track_ids <- rbind(track_ids, tmp)
Sys.sleep(0.1)
}
track_ids
}
get_track_metadata(sample_n(usr1_lib,10)$trackName)
get_track_metadata <- function(track_vector, track_ids = NULL) {
tracks <- track_vector
n_tracks <- length(tracks)
# batch since Spotify can only do 50 IDs at a time
batches <- ceiling(n_tracks/50)
last_batch_length <- n_tracks%%50
if (is.null(track_ids)) {
track_ids <- get_track_ids(tracks) # this is a choke point for speed
} else { } # do nothing
# API token via wrappify
auth_token = getAuthenticationToken()
# collection
track_features <- NULL
for (batch in 1:batches) {
start_idx <- 50*(batch-1)+1
if (batch < batches) {
end_idx <- start_idx + 50
} else {
end_idx <- start_idx + last_batch_length
}
# query
ids <- paste(track_ids$id[start_idx:end_idx], collapse = ',')
url <- glue('https://api.spotify.com/v1/audio-features?ids={ids}')
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', auth_token)))
# format data and append
batch_features <- rbindlist(lapply(content(response)$audio_features, data.frame))
track_features <- rbind(track_features, batch_features)
Sys.sleep(0.1)
}
track_features <- track_features[, c(1:11, 13, 17, 18)] # index all
list('features' = track_features, 'track_ids' = track_ids)
}
set.seed(1)
t <- sample_n(usr1_lib,5)
t$trackName
get_track_metadata(t$trackName)
get_genres_features(t)
# Takes a dataframe with artistNames, trackNames, and cbinds audiofeatures, track ids,
# and explodes the frame to have all the genres
# must have $artistName, $trackName columns
get_genres_features <- function(artist_track_frame, track_ids = NULL) {
# remove whitespace for joining
artist_track_frame$artistName <- str_replace_all(artist_track_frame$artistName, pattern=' ', replacement='')
# get genres
genres <- get_artists_genres(artist_track_frame$artistName)
if (is.null(track_ids)) {
# get track_ids and features
tmp_list <- get_track_metadata(artist_track_frame$trackName)
} else {
# get features using existing IDs
tmp_list <- get_track_metadata(artist_track_frame$trackName, track_ids = track_ids)
}
features <- tmp_list$features
track_ids <- tmp_list$track_ids
return(track_ids)
# bind ids
artist_track_frame <- full_join(artist_track_frame, track_ids, by = c('trackName'='trackName'))
# join features
artist_track_frame <- full_join(artist_track_frame, features, by = c("id" = "id"))
# join genres
artist_track_frame <- full_join(artist_track_frame, genres, by = c("artistName" = "artistName"))
artist_track_frame
}
get_genres_features(t)
get_genres_features(t)
# Takes a dataframe with artistNames, trackNames, and cbinds audiofeatures, track ids,
# and explodes the frame to have all the genres
# must have $artistName, $trackName columns
get_genres_features <- function(artist_track_frame, track_ids = NULL) {
# remove whitespace for joining
artist_track_frame$artistName <- str_replace_all(artist_track_frame$artistName, pattern=' ', replacement='')
# get genres
genres <- get_artists_genres(artist_track_frame$artistName)
if (is.null(track_ids)) {
# get track_ids and features
tmp_list <- get_track_metadata(artist_track_frame$trackName)
} else {
# get features using existing IDs
tmp_list <- get_track_metadata(artist_track_frame$trackName, track_ids = track_ids)
}
features <- tmp_list$features
track_ids <- tmp_list$track_ids
# bind ids
artist_track_frame <- full_join(artist_track_frame, track_ids, by = c('trackName'='trackName'))
# join features
artist_track_frame <- full_join(artist_track_frame, features, by = c("id" = "id"))
# join genres
artist_track_frame <- full_join(artist_track_frame, genres, by = c("artistName" = "artistName"))
artist_track_frame
}
get_genres_features(t)
# User 1
usr1_lib2 <- get_genres_features(usr1_lib)
usr1_streams2 <- get_genres_features(usr1_streams)
# User 2
usr2_lib2 <- get_genres_features(usr2_lib)
usr2_streams2 <- get_genres_features(usr2_streams)
## Export
write.csv(usr1_lib2, '../Enhanced_Data/User1/usr1_lib.csv', row.names=FALSE)
write.csv(usr1_streams2, '../Enhanced_Data/User1/usr1_streams.csv', row.names=FALSE)
write.csv(usr2_lib2, '../Enhanced_Data/User2/usr2_lib.csv', row.names=FALSE)
write.csv(usr2_streams2, '../Enhanced_Data/User2/usr2_streams.csv', row.names=FALSE)
# Peek
usr1_lib2
usr1_streams2
